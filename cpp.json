{
	"PS head":
	{
		"prefix": ["hd"],
		"body": [
			"/* Code By [ Your Handle ]",
			"GitHub : [ Your Handle ] */",
			"",
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"#define ll long long int",
			"#define INF (ll)999999999999",
			"#define mod (ll)1000000007",
			"#define amod (ll)998244353",
			"#define all(v) (v).begin(), (v).end()",
			"",
			"#define debug if constexpr (local) std::cout",
			"#define endl '\\n'",
			"",
			"#ifdef ONLINE_JUDGE",
			"constexpr bool local = false;",
			"#else",
			"constexpr bool local = true;",
			"#endif",
			"",
			"void fastio() {",
			"	ios::sync_with_stdio(false);",
			"	cin.tie(0);",
			"}",
			"",
			"int main() {",
			"	fastio();",
			"	$0",
			"}"
		],
		"description": "make head"
	},
	"test-case-templete":
	{
		"prefix": ["tc"],
		"body": [
			"int T;",
			"cin >> T;",
			"while(T--) { ",
			"	$0",
			"}"
		],
		"description": "make test case templete"
	},
	"repeat1":
	{
		"prefix": ["rep1"],
		"body": [
			"for(int i=0; i<N; i++) {",
			"	$0",
			"}"
		],
		"description": "make repeat-1 templete"
	},
	"repeat2":
	{
		"prefix": ["rep2"],
		"body": [
			"for(int i=0; i<N; i++) {",
			"	for(int j=0; j<N; j++) {",
			"		$0",
			"	}",
			"}"
		],
		"description": "make repeat-2 templete"
	},
	"fibobasic":
	{
		"prefix": ["fib"],
		"body": [
			"vector<ll> fibo(1000005);",
			"for(int h=1; h<=1000000; h++) {",
			"	if(h==1 || h==2) {",
			"		fibo[h]=1;",
			"	} else {",
			"		fibo[h]=fibo[h-1]+fibo[h-2];",
			"	}",
			"}",
		],
		"description": "make fibonacci basic templete"
	},
	"bigint_sum":
	{
		"prefix": ["ssum"],
		"body": [
			"string ssum(string sa, string sb) {",
			"	int tmp = 0;",
			"	string res = \"\";",
			"	while(!sa.empty() || !sb.empty() || tmp) {",
			"		if(!sa.empty()) {",
			"			tmp += (sa.back() - '0');",
			"			sa.pop_back();",
			"		}",
			"		if(!sb.empty()) {",
			"			tmp += (sb.back() - '0');",
			"			sb.pop_back();",
			"		}",
			"		res += ((tmp%10) + '0');",
			"		tmp /= 10;",
			"	}",
			"	reverse(all(res));",
			"	return res;",
			"}",
			""
		],
		"description": "make bigint_sum templete"
	},
	"mers_p":
	{
		"prefix": ["mers_p"],
		"body": [
			"bool mers_p(int R) {",
			"	int tmp = 1;",
			"	bool f=false;",
			"	while(tmp <= 2^31) {",
			"		tmp<<=1;",
			"		if(tmp == R+1) {",
			"			f=true;",
			"			break;",
			"		}",
			"	}",
			"	if(!f) {",
			"		return false;",
			"	} else {",
			"		for(int k=2; k<=(int)sqrt(R); k++) {",
			"			if(R%k == 0) return false;",
			"		}",
			"	}",
			"	return true;",
			"}",
			""
		],
		"description": "make meresenne_prime_check templete"
	},
	"geom": {
		"prefix": "geom",
		"body": [
			"struct Point {",
			"    int x = 0;",
			"    int y = 0;",
			"};",
			"",
			"Point pipo(pair<int, int> Z) {",
			"    Point tmp;",
			"    tmp.x = Z.first;",
			"    tmp.y = Z.second;",
			"    return tmp;",
			"}",
			"",
			"double dist(Point A, Point B) {",
			"    return sqrt((A.x-B.x)*(A.x-B.x) + (A.y-B.y)*(A.y-B.y));",
			"}",
			"",
			"struct Point_d {",
			"    double x = 0;",
			"    double y = 0;",
			"};",
			"",
			"Point_d pipo_d(pair<double, double> Z) {",
			"    Point_d tmp;",
			"    tmp.x = Z.first;",
			"    tmp.y = Z.second;",
			"    return tmp;",
			"}",
			"",
			"double dist_d(Point_d A, Point_d B) {",
			"    return sqrt((A.x-B.x)*(A.x-B.x) + (A.y-B.y)*(A.y-B.y));",
			"}"
		],
		"description": "make geometry template"
	},
	"mkmodulo": {
		"prefix": "mkmodulo",
		"body": [
			"template<unsigned int P, unsigned int PHI = P - 1>",
			"class Modulo {",
			"private:",
			"    long long n;",
			"",
			"public:",
			"    Modulo() {}",
			"    constexpr Modulo(long long _n) : n(_n >= 0 ? _n % P : (P - (-_n % P)) % P) {}",
			"    constexpr Modulo operator+(const Modulo& rhs) const {return Modulo((n + rhs.n) % P);}",
			"    constexpr Modulo& operator+=(const Modulo& rhs) {*this = *this + rhs; return *this;}",
			"    constexpr Modulo operator-() const {return n == 0 ? Modulo(0) : Modulo(P - n);}",
			"    constexpr Modulo operator-(const Modulo& rhs) const {return *this + (-rhs);}",
			"    constexpr Modulo& operator-=(const Modulo& rhs) {(*this) = (*this) - rhs; return *this;}",
			"    constexpr Modulo operator*(const Modulo& rhs) const {return Modulo((n * rhs.n) % P);}",
			"    constexpr Modulo& operator*=(const Modulo& rhs) {(*this) = (*this) * rhs; return *this;}",
			"    friend ostream& operator << (ostream &out, Modulo t){ return out << t.n; }",
			"",
			"    [[nodiscard]] constexpr Modulo pow(unsigned long long powered) const {",
			"        if (powered <= 1) {",
			"            return powered == 0 ? 1 : *this;",
			"        }",
			"        Modulo hold = pow(powered / 2);",
			"        return powered % 2 == 0 ? hold * hold : hold * hold * (*this);",
			"    }",
			"    [[nodiscard]] constexpr Modulo inverse() const {return this->pow(PHI - 1);}",
			"    constexpr Modulo operator/(const Modulo& rhs) const {",
			"        if (rhs == 0) {throw std::logic_error(\"DIV BY ZERO\");}",
			"        return *this * rhs.inverse();",
			"    }",
			"    constexpr Modulo& operator/=(const Modulo& rhs) {*this = *this / rhs; return *this;}",
			"    constexpr bool operator==(const Modulo& rhs) const {return n == rhs.n;}",
			"    constexpr explicit operator int() const {return static_cast<int>(n);}",
			"};"
		],
		"description": "make modulo class"
	}
}
